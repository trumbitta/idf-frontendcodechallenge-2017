/* Variables */
:root {
  /*
    Using variables for these two trivial colors, just in case we decide to tune them a bit

    WARNING: It's not possibile to use CSS custom properties on pseudo-elements with Edge until
    October 17h 2017. So the `ul.wizard-steps` widget and the custom checkbox don't use them.
    See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
  */
  --color-black: #000000;
  --color-white: #ffffff;

  --color-gray-dark:  #848484;
  --color-gray:       #dddddd;
  --color-gray-light: #f9f9f9;

  --color-primary: #009cde;
  --color-danger:  #f5391e;

  --color-link: var(--color-primary);

  --border-radius-md: 4px;
  --border-radius-sm: 3px;
  --border-radius-xs: 2px;

  --spatial-rhythm-xl: 4em;
  --spatial-rhythm-lg: 2em;
  --spatial-rhythm-md: 1em;
  --spatial-rhythm-sm: 0.5em;
  --spatial-rhythm-xs: 0.25em;
}

/* Base */
body {
  background-color: var(--color-gray-light);
  color: var(--color-black);
}

button,
label {
  cursor: pointer;
}

/* Typography */
h1 {
  font-size: 2em;
}

h2 {
  font-size: 1.5em;
}

a:link,
a:visited {
  color: var(--color-link);
  text-decoration: none;
}

a:hover,
a:active {
  border-bottom: 0.0625em solid var(--color-link); /* `text-decoration: underline` tends to go over some letters */
}

/* Lists */
ul.list-unstyled,
ul.list-inline,
ul.wizard-steps {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

ul.list-inline li {
  display: inline-block;
}

ul.list-striped li:nth-child(even) {
  background-color: var(--color-gray);
  color: var(--color-white);
}

ul.wizard-steps {
  display: block;
  line-height: 1;
  font-size: 1.25em;
}

ul.wizard-steps li {
  background-color: var(--color-gray-dark);
  color: var(--color-white);
  margin-bottom: var(--spatial-rhythm-xs);
  padding: var(--spatial-rhythm-sm) var(--spatial-rhythm-md);
}

ul.wizard-steps li:last-child {
  margin-bottom: 0;
}

ul.wizard-steps li.active {
  background-color: var(--color-primary);
}

@media only screen and (min-width: 40.063em) { /* 641px - CSS variables don't seem to work here */
  ul.wizard-steps {
    display: flex;
    justify-content: space-around;
  }

  ul.wizard-steps li {
    position: relative;
    margin-right: 2px;
    margin-bottom: 0;
    padding: 1.2em 2.2em;
    flex: 1;
  }

  ul.wizard-steps li::after,
  ul.wizard-steps li::before {
    content: ' ';
    border-top: 1.7em solid transparent;
    border-bottom: 1.7em solid transparent;
    position: absolute;
    top: 0;
  }

  ul.wizard-steps li::after {
    border-left: 1em solid #848484;
    right: -1em;
    z-index: 1;
  }

  ul.wizard-steps li::before {
    border-left: 1em solid #f9f9f9;
    left: 0;
  }

  ul.wizard-steps li.active::after {
    border-left-color: #009cde;
  }
}

li {
  padding: 0.375em 0.4365em;
}

/* Buttons */
button[type="reset"] {
  color: var(--color-gray-dark);
}

.btn {
  border-radius: var(--border-radius-md);
  border: 1px solid transparent;
  box-shadow: -1px 0 0 rgba(100, 100, 100, 0.2),
              1px 0 0 rgba(100, 100, 100, 0.2),
              0 1px 1px rgba(100, 100, 100, 0.4);
  padding: 0.5em 1.125em;
  line-height: 1;
}

.btn-primary {
  background-color: var(--color-primary);
  color: var(--color-white);
  border-color: var(--color-primary);
}

.btn-link {
  background-color: transparent;
  color: var(--color-link);
  box-shadow: none;
  padding: 0;
}

.btn-link:disabled {
  color: var(--color-gray);
}

/* Forms */
label {
  color: var(--color-gray-dark);
  font-weight: 500;
  margin: 0;
}

input[type='text'],
input[type='email'] {
  background-color: var(--color-white);
  border: 1px solid var(--color-gray);
  border-radius: var(--border-radius-xs);
  box-shadow: inset 0 1px 1px rgba(150, 150, 150, 0.2),
              inset -1px 0 0 rgba(150, 150, 150, 0.1),
              inset 1px 0 0 rgba(150, 150, 150, 0.1);
  padding: 0.4365em 0.75em;
  line-height: 1;
}

input[type='checkbox'] {
  position: absolute;
  z-index: -1;
  opacity: 0;
}

input[type='checkbox'] + label {
  position: relative;
  padding-left: 1.25em;
}

input[type='checkbox'] + label::before {
  content: ' ';
  position: absolute;
  left: 0;
  top: 50%;
  width: 1em;
  height: 1em;
  margin-top: -0.5em;
  border: 0.125em solid #009cde;
  border-radius: 3px;
}

input[type='checkbox']:checked + label::after {
  content: ' ';
  position: absolute;
  left: 0;
  top: 50%;
  width: 0.5em;
  height: 0.5em;
  margin-top: -0.25em;
  margin-left: 0.25em;
  background: #009cde;
  border-radius: 2px;
}

.form-row {
  margin-bottom: var(--spatial-rhythm-md);
  padding: 0;
}

.form-row input {
  display: block;
  width: 100%;
  margin-bottom: var(--spatial-rhythm-xs);
}

@media only screen and (min-width: 40.063em) { /* 641px - CSS variables don't seem to work here */
  .form-row {
    display: flex;
  }

  .form-row input {
    flex: auto;
    margin-right: var(--spatial-rhythm-md);
    margin-bottom: 0;
  }
}

.form-row-inline {
  display: inline-block;
}

/* Cards */
.card {
  background-color: var(--color-white);
  box-shadow: 0 3px 1px -1px rgba(100, 100, 100, 0.4),
              -2px 0 1px -1px rgba(100, 100, 100, 0.2),
              2px 0 1px -1px rgba(100, 100, 100, 0.2);
  padding: 1.125em 1.25em;
}

/* Footer */
footer {
  background-color: var(--color-gray);
}

/*
  Status-aware text
  We use !important for these because when we use it we want them to always be active
*/
.text-danger {
  color: var(--color-danger) !important;
}

/*
  Utilities
  We use !important for these because when we use it we want them to always be active
*/
.text-align-center {
  text-align: center !important;
}

.text-align-right {
  text-align: right !important;
}

/* https://github.com/twbs/bootstrap/blob/v4-dev/scss/mixins/_screen-reader.scss */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0,0,0,0);
  white-space: nowrap;
  clip-path: inset(50%);
  border: 0;
}

.sr-only-md {
  position: static;
  width: auto;
  height: auto;
  overflow: visible;
  clip: auto;
  white-space: normal;
  clip-path: none;
  border: none;
}

@media only screen and (min-width: 40.063em) { /* 641px - CSS variables don't seem to work here */
  .sr-only-md {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    overflow: hidden;
    clip: rect(0,0,0,0);
    white-space: nowrap;
    clip-path: inset(50%);
    border: 0;
  }
}
/*
  Utilities - Rhythm - Vertical
  I'm not going to follow closely the dimensions in the sample images; I'll lay out
  a system with progressive sizes based on the relative font-size of the element.
  I'll then apply and combine the resulting classes to obtain a close resemblance
  of the spatial rhythm in the sample images.

  These are usually completely generated and maintained with <20 lines of Sass code
*/
.margin-vertical-md {
  margin-top: var(--spatial-rhythm-md) !important;
  margin-bottom: var(--spatial-rhythm-md) !important;
}

.margin-vertical-sm {
  margin-top: var(--spatial-rhythm-sm) !important;
  margin-bottom: var(--spatial-rhythm-sm) !important;
}

.margin-vertical-xs {
  margin-top: var(--spatial-rhythm-xs) !important;
  margin-bottom: var(--spatial-rhythm-xs) !important;
}

.margin-top-md {
  margin-top: var(--spatial-rhythm-md) !important;
}

.margin-bottom-md {
  margin-bottom: var(--spatial-rhythm-md) !important;
}

.margin-bottom-sm {
  margin-bottom: var(--spatial-rhythm-sm) !important;
}

.margin-bottom-none {
  margin-bottom: 0 !important;
}

.padding-top-lg {
  padding-top: var(--spatial-rhythm-lg) !important;
}

.padding-vertical-md {
  padding-top: var(--spatial-rhythm-md) !important;
  padding-bottom: var(--spatial-rhythm-md) !important;
}

/*
  Layout / Grid
  Breakpoints are from Foundation: http://foundation.zurb.com/sites/docs/v/5.5.3/media-queries.html
*/
body {
  display: flex;
  min-height: 100vh;
  flex-direction: column;
}

main {
  flex: 1;
}

.container {
  margin: 0 0.5em;
}

@media only screen and (min-width: 40.063em) { /* 641px - CSS variables don't seem to work here */
  .container {
    width: 76%;
    margin: 0 auto;
  }
}

@media only screen and (min-width: 90.063em) { /* 1441px */
  .container {
    width: 70%;
  }
}

@media only screen and (min-width: 120.063em) { /* 1921px */
  .container {
    width: 50%;
  }
}
